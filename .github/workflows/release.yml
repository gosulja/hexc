# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: hexi
            asset_name: hexi-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: hexi.exe
            asset_name: hexi-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: hexi
            asset_name: hexi-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: hexi
            asset_name: hexi-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}

    - name: Get version from Cargo.toml
      id: version
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          VERSION=$(powershell -Command "(Get-Content Cargo.toml | Select-String 'version = ').Line.Split('=')[1].Trim().Trim('\"')")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        else
          VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Create archive
      run: |
        mkdir -p dist
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/
          cd dist && 7z a ${{ matrix.asset_name }}-${{ env.VERSION }}.zip ${{ matrix.artifact_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/
          cd dist && tar -czf ${{ matrix.asset_name }}-${{ env.VERSION }}.tar.gz ${{ matrix.artifact_name }}
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}-${{ env.VERSION }}
        path: dist/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}